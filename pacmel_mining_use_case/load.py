# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_load.ipynb (unless otherwise specified).

__all__ = ['fpreprocess_numeric_vars', 'fread_and_concat', 'fread_mining_monitoring_files', 'fslicer', 'slices2array',
           'fmultiTSloader', 'fget_time_interval_of_window']

# Cell
import pandas as pd
import numpy as np

# Cell
def fpreprocess_numeric_vars(data, cname_ts='description', normalize=True, nan_replacement=0):
    "Preprocess a dataframe `data` containing the monitoring data from a mining longwall. \
    Non-numeric variables will be removed. Each column \
    is expected to have values of a variable in form of a time series, whose index will be described in the \
    column named `cname_ts`. The timestamp column will be renamed to 'timestamp'.NaN values will be \
    replaced by a constant value `nan_replacement`"
    data['timestamp'] = pd.to_datetime(data[cname_ts])
    data = data.drop(cname_ts, axis=1)
    df1 = data.select_dtypes(exclude='object')
    df2 = data.select_dtypes(include='object').astype('bool')
    data = pd.concat([df2.reset_index(drop = True), df1], axis = 1)
    data_numeric = data.select_dtypes(include=['float', 'datetime'])
    tmp = data_numeric.select_dtypes(include='float')
    if normalize: data_numeric[data_numeric.select_dtypes(include='float').columns] = (tmp - tmp.min())/(tmp.max()-tmp.min())
    data_numeric = data_numeric.dropna(axis=1, how='all').fillna(nan_replacement)
    return data_numeric

# Cell
def fread_and_concat(paths, **read_args):
    "Read, from `paths`, a list of mining dataframes and concat them. All dataframes \
    must have the same columns. "
    return pd.concat([pd.read_csv(x, **read_args) for x in paths],
                     ignore_index=True)

# Cell
def fread_mining_monitoring_files(paths):
    "Read monitoring files from the PACMEL mining use case."
    df = fread_and_concat(paths,
                          sep=';',
                          skiprows=2)
    return df

# Comes from 01_DCAE.ipynb, cell
def fslicer(df, w, s=1, padding=False, padding_value=0):
    "Transform a numeric dataframe `df` into slices (sub-dataframes) of `w` \
    rows and the same number of columns than the original dataframe. The \
    distance between each slice is given by the stride `s`. If `padding` is \
    equals to True, the last slices which have less than `w` points are filled \
    with the value marked in the argument `padding_value`. Otherwise, those \
    slices are removed from the result."
    aux = [df.iloc[x:x+w] for x in range(0, len(df), s)]
    if padding:
        with_padding = [x.append(pd.DataFrame(
            np.full((w - len(x), len(df.columns)), padding_value),
            columns=df.columns.values)) if len(x) < w else x for x in aux]
    else:
        with_padding = [x for x in aux if len(x) == w]
    return with_padding

# Comes from 01_DCAE.ipynb, cell
def slices2array(slices):
    "`slices` is a list of dataframes, each of them containing an slice of a multivariate time series."
    return np.rollaxis(np.dstack([x.values for x in slices]), -1)

# Comes from 01_DCAE.ipynb, cell
def fmultiTSloader(df_paths, w, stride, ts_colname='description', **kwargs):
    "Preprocess a dataframe with multivariate time series from a set of paths `df_paths`, \
    preprocess it calling `fpreprocess_numeric_vars` \
    slice it into time windows of length `w` and stride `stride` calling `fslicer`, and \
    conert the result into a numpy array, suitable for ML libraries. Optional arguments for \
    the intermediate functions can be passed through `**kwargs`"
    df = fread_mining_monitoring_files(df_paths)
    df = fpreprocess_numeric_vars(df, cname_ts=ts_colname)
    df_slices = fslicer(df, w, stride)
    array_slices = slices2array([x.drop('timestamp', axis=1) for x in df_slices])
    return (df, df_slices, array_slices)

# Comes from 02_dimensionality_reduction.ipynb, cell
def fget_time_interval_of_window(w_index, ref_ts, w_size, stride=1):
    "Returns the time interval of the window `w_index` as a datetime tuple (start, end). \
    A reference timestamp `ts`, a window size `w_size` and a stride value `stride` must be \
    provided too."
    return None