# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/Timecluster_high_dimensional_data.ipynb (unless otherwise specified).

__all__ = ['fslicer', 'createDCAE', 'slices2array']

# Cell
import pandas as pd
import seaborn as sns
import numpy as np
from fastcore import test
from keras.models import Sequential, Model
from keras.layers import Dense, Flatten, Conv1D, MaxPool1D, Reshape, UpSampling1D
import tensorflow as tf
from tqdm import tqdm
import umap
import matplotlib.pyplot as plt
import seaborn as sns

# Cell
def fslicer(df, w, s=1, padding=0):
    "Transform a numeric dataframe `df` into slices (sub-dataframes) of `w` rows and the same number of columns than the \
    original dataframe. The distance between each slice is given by the stride `s`. The last slices which have \
    less than `w` points are filled with the value marked in the argument `padding`"
    aux = [df.iloc[x:x+w] for x in range(0,len(df), s)]
    with_padding = [x.append(pd.DataFrame(np.full((w - len(x), len(df.columns)), padding), columns=df.columns.values)) if len(x) < w else x for x in aux]
    return with_padding

# Cell
def createDCAE(w, d, delta):
    "Create a Deep Convolutional Autoencoder for multivariate time series of `d` dimensions, \
    sliced with a window size of `w`. The parameter `delta` sets the number of latent features that will be \
    contained in the Dense layer of the network."
    model = Sequential()
    model.add(Conv1D(filters=64, kernel_size=10, activation='relu', input_shape=(w,d), padding='same'))
    model.add(MaxPool1D(pool_size=2))
    model.add(Conv1D(filters=32, kernel_size=5, activation='relu', padding='same'))
    model.add(MaxPool1D(pool_size=2))
    model.add(Conv1D(filters=12, kernel_size=5, activation='relu', padding='same'))
    model.add(MaxPool1D(pool_size=3))
    aux_shape = model.output_shape[1:]
    model.add(Flatten())
    model.add(Dense(units=delta, activation='linear', name='latent_features'))
    model.add(Reshape(target_shape=aux_shape))
    model.add(Conv1D(filters=12, kernel_size=5, activation='relu', padding='same'))
    model.add(UpSampling1D(size=3))
    model.add(Conv1D(filters=32, kernel_size=5, activation='relu', padding='same'))
    model.add(UpSampling1D(size=2))
    model.add(Conv1D(filters=64, kernel_size=10, activation='relu', padding='same'))
    model.add(UpSampling1D(size=2))
    model.add(Conv1D(filters=d, kernel_size=10, activation='linear', padding='same'))
    return model

# Cell
def slices2array(slices):
    "`slices` is a list of dataframes, each of them containing an slice of a multivariate time series."
    return np.rollaxis(np.dstack([x.values for x in slices]), -1)