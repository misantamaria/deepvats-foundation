[1] [ --> _set_encoder ]
[1]  [ _set_encoder ] About to exec _set_enc_input
[1]  [ _set_encoder ] enc_input~(433, 1, 8)
[1]  [ _set_encoder ] About to exec _set_optimizer
[1] [ --> _set_optimizer ]
[1] [_set_encoder --> ]
[1] [ --> set_fine_tune_ ]
[1]  [ set_fine_tune_ ] Model class: momentfm.models.moment.MOMENTPipeline
[1]  [ set_fine_tune_ ] Moment
[1] [set_fine_tune_ --> ]
[1] [_set_encoder --> ]
[1] [ --> fine_tune ]
[1]  [ fine_tune ] Original enc_learn MOMENTPipeline(
  (normalizer): RevIN()
  (tokenizer): Patching()
  (patch_embedding): PatchEmbedding(
    (value_embedding): Linear(in_features=8, out_features=512, bias=False)
    (position_embedding): PositionalEmbedding()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (encoder): T5Stack(
    (embed_tokens): Embedding(32128, 512)
    (block): ModuleList(
      (0): T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
              (relative_attention_bias): Embedding(32, 6)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (1-7): 7 x T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (final_layer_norm): T5LayerNorm()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (head): PretrainHead(
    (dropout): Dropout(p=0.1, inplace=False)
    (linear): Linear(in_features=512, out_features=8, bias=True)
  )
)  | Final model MOMENTPipeline(
  (normalizer): RevIN()
  (tokenizer): Patching()
  (patch_embedding): PatchEmbedding(
    (value_embedding): Linear(in_features=8, out_features=512, bias=False)
    (position_embedding): PositionalEmbedding()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (encoder): T5Stack(
    (embed_tokens): Embedding(32128, 512)
    (block): ModuleList(
      (0): T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
              (relative_attention_bias): Embedding(32, 6)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (1-7): 7 x T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (final_layer_norm): T5LayerNorm()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (head): PretrainHead(
    (dropout): Dropout(p=0.1, inplace=False)
    (linear): Linear(in_features=512, out_features=8, bias=True)
  )
)
[1] [ --> set_fine_tune_ ]
[1]  [ set_fine_tune_ ] Model class: momentfm.models.moment.MOMENTPipeline
[1]  [ set_fine_tune_ ] Moment
[1] [set_fine_tune_ --> ]
[1]  [ set_fine_tune_ ] Use fine_tune_moment parameters
[1] [91m [ set_fine_tune_ ] Processing wlen 8 | wlens [] | i 1/1[0m
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 5.470308678923175e-05[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 5.470308678923175e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 4.103703031432815e-05[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 4.103703031432815e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0007897104951553047[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0007897104951553047
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0005091316998004913[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0005091316998004913
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 7.886585080996156e-05[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 7.886585080996156e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0008536891546100378[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0008536891546100378
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.001373307779431343[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.001373307779431343
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 6.872456287965178e-05[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 6.872456287965178e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0004197230446152389[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0004197230446152389
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.003066438715904951[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.003066438715904951
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00011347846884746104[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00011347846884746104
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0001775233104126528[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0001775233104126528
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.006386755965650082[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006386755965650082
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00015314786287490278[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.000153147877426818
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00027581665199249983[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00027581665199249983
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.006661394611001015[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006661394611001015
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00430464930832386[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00430464930832386
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00022378729772754014[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00022378729772754014
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00464250985532999[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00464250985532999
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.006488773040473461[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006488773040473461
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([5, 1, 8]) | batch_masks~torch.Size([5, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([5, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([5, 8])
[1]  [ moment_set_masks ] mask~torch.Size([5, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([5, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([5, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([5, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([5, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([5, 1, 8]) | o~torch.Size([5, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([5, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([5, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([5, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0002497199457138777[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0002497199457138777
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([5, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([5, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([5, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([5, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([5, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([5, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [91m [ fine_tune_moment_single_ ] Eval results: {'mse': 0.0018097824296424805, 'rmse': nan, 'mae': 0.022393247394177775, 'smape': 0.20917028325201625, 'loss': 0.001758708940629038}.[0m
[1] [fine_tune_moment_single_ --> ]
[1]  [ fine_tune_moment_single_ ] Train | wlen 8
[1] [ --> fine_tune_moment_train_ ]
[1]  [ fine_tune_moment_train_ ] Training loop
[1]  [ fine_tune_moment_train_ ] Fine tune loop | batch_masks~torch.Size([16, 8])
[1]  [ fine_tune_moment_train_ ] num_epochs 5 | n_batches 7
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 8]) | epoch 0 | train 0 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0006500242743641138[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0006500242743641138
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 8]) | epoch 0 | train 0 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 8]) | epoch 0 | train 1 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.10090653598308563[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 1, 0, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.10090653598308563
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 8]) | epoch 0 | train 1 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 8]) | epoch 0 | train 2 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.008263974450528622[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.008263973519206047
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 8]) | epoch 0 | train 2 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 8]) | epoch 0 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.006513291038572788[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006513291038572788
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 8]) | epoch 0 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 8]) | epoch 0 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.16398388147354126[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.16398388147354126
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 8]) | epoch 0 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 8]) | epoch 0 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.09238707274198532[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.09238706529140472
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 8]) | epoch 0 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([13, 1, 8]) | epoch 0 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([13, 1, 8]) | batch_masks~torch.Size([13, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([13, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([13, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([13, 1, 8]) | batch_masks ~ torch.Size([13, 8]) | mask ~ torch.Size([13, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([13, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([13, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([13, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([13, 1, 8]) | o~torch.Size([13, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([13, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([13, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([13, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.015496756881475449[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.015496755950152874
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([13, 1, 8]) | epoch 0 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 8]) | epoch 1 | train 1 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.016101574525237083[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.016101574525237083
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 8]) | epoch 1 | train 1 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 8]) | epoch 1 | train 2 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.041102297604084015[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.041102297604084015
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 8]) | epoch 1 | train 2 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 8]) | epoch 1 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.011533848941326141[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.011533848941326141
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 8]) | epoch 1 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 8]) | epoch 1 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.027545329183340073[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.027545329183340073
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 8]) | epoch 1 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 8]) | epoch 1 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.052380405366420746[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.052380405366420746
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 8]) | epoch 1 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 8]) | epoch 1 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.01632518693804741[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.01632518693804741
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 8]) | epoch 1 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([13, 1, 8]) | epoch 1 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([13, 1, 8]) | batch_masks~torch.Size([13, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([13, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([13, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([13, 1, 8]) | batch_masks ~ torch.Size([13, 8]) | mask ~ torch.Size([13, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([13, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([13, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([13, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([13, 1, 8]) | o~torch.Size([13, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([13, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([13, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([13, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.007539429236203432[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.007539429236203432
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([13, 1, 8]) | epoch 1 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 8]) | epoch 2 | train 2 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00348040834069252[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00348040834069252
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 8]) | epoch 2 | train 2 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 8]) | epoch 2 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.006839693523943424[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0068396939896047115
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 8]) | epoch 2 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 8]) | epoch 2 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.024624206125736237[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.024624206125736237
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 8]) | epoch 2 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 8]) | epoch 2 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0048616984859108925[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0048616984859108925
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 8]) | epoch 2 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 8]) | epoch 2 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.016992907971143723[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.016992907971143723
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 8]) | epoch 2 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 8]) | epoch 2 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.014320327900350094[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.014320327900350094
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 8]) | epoch 2 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([13, 1, 8]) | epoch 2 | train 8 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([13, 1, 8]) | batch_masks~torch.Size([13, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([13, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([13, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([13, 1, 8]) | batch_masks ~ torch.Size([13, 8]) | mask ~ torch.Size([13, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([13, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([13, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([13, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([13, 1, 8]) | o~torch.Size([13, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([13, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([13, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([13, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.021614644676446915[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.021614644676446915
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([13, 1, 8]) | epoch 2 | train 8 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 8]) | epoch 3 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.01029259618371725[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.01029259618371725
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 8]) | epoch 3 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 8]) | epoch 3 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.005859335884451866[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.005859335884451866
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 8]) | epoch 3 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 8]) | epoch 3 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.02349759265780449[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.02349759265780449
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 8]) | epoch 3 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 8]) | epoch 3 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0018670805729925632[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0018670805729925632
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 8]) | epoch 3 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 8]) | epoch 3 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0014901213580742478[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0014901213580742478
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 8]) | epoch 3 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 8]) | epoch 3 | train 8 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.008061652071774006[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.008061652071774006
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 8]) | epoch 3 | train 8 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([13, 1, 8]) | epoch 3 | train 9 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([13, 1, 8]) | batch_masks~torch.Size([13, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([13, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([13, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([13, 1, 8]) | batch_masks ~ torch.Size([13, 8]) | mask ~ torch.Size([13, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([13, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([13, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([13, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([13, 1, 8]) | o~torch.Size([13, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([13, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([13, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([13, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00931937899440527[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00931937899440527
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([13, 1, 8]) | epoch 3 | train 9 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 8]) | epoch 4 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0054460205137729645[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0054460205137729645
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 8]) | epoch 4 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 8]) | epoch 4 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.007105165161192417[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.007105165161192417
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 8]) | epoch 4 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 8]) | epoch 4 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0010962734231725335[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0010962734231725335
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 8]) | epoch 4 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 8]) | epoch 4 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.006180289667099714[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006180289201438427
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 8]) | epoch 4 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 8]) | epoch 4 | train 8 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.02676321566104889[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.02676321566104889
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 8]) | epoch 4 | train 8 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 8]) | epoch 4 | train 9 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 8]) | batch_masks ~ torch.Size([16, 8]) | mask ~ torch.Size([16, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.002817864529788494[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.002817864529788494
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 8]) | epoch 4 | train 9 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([13, 1, 8]) | epoch 4 | train 10 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([13, 1, 8]) | batch_masks~torch.Size([13, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([13, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] mask~torch.Size([13, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([13, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0]])[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([13, 1, 8]) | batch_masks ~ torch.Size([13, 8]) | mask ~ torch.Size([13, 8])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([13, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([13, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([13, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([13, 1, 8]) | o~torch.Size([13, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([13, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([13, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([13, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0033503228332847357[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.003350322600454092
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([13, 1, 8]) | epoch 4 | train 10 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] Best epoch: -1
[1] [fine_tune_moment_train_ --> ]
[1]  [ fine_tune_moment_single_ ] fine_tune_moment_single | Eval Post | wlen 8
[1] [ --> fine_tune_moment_single_ ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00033931212965399027[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00033931212965399027
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0002475460059940815[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0002475460059940815
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.005386913660913706[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.005386913660913706
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0028858305886387825[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0028858305886387825
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00048798159696161747[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00048798159696161747
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.004742715507745743[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.004742715507745743
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00969952903687954[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00969952903687954
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.00038409605622291565[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00038409605622291565
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0026104371063411236[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0026104371063411236
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.01925266720354557[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 0, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 1, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.01925266720354557
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0008423234103247523[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0008423234103247523
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.001190268900245428[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.001190268900245428
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.03757185488939285[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.03757185488939285
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.001111189485527575[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.001111189485527575
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.002023138105869293[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.002023138105869293
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.05451763793826103[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.05451763793826103
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0262282844632864[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 0, 0, 1, 1, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 0, 0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0262282844632864
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0012519627343863249[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[0, 1, 0, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[1, 0, 1, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0012519627343863249
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.02453477308154106[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 1, 1, 0],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 0]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.02453477308154106
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 8]) | batch_masks~torch.Size([16, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] mask~torch.Size([16, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 8]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.04519200325012207[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 0, 1, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 1],
        [0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1, 0, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.04519200325012207
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([5, 1, 8]) | batch_masks~torch.Size([5, 8]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([5, 1, 8])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([5, 8])
[1]  [ moment_set_masks ] mask~torch.Size([5, 8])
[1]  [ moment_set_masks ] batch_masks~torch.Size([5, 8])
[1] [91m [ moment_set_masks ] mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_set_masks ] batch_masks: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] Cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([5, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([5, 8]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([5, 1, 8]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([5, 1, 8]) | o~torch.Size([5, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([5, 1, 8]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([5, 8]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([5, 8]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1] [91m [ moment_compute_loss ] Reconstruction loss: 0.0013318416895344853[0m
[1] [91m [ moment_compute_loss ] Batch mask: tensor([[1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Mask: tensor([[1, 1, 0, 1, 1, 0, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1, 1]], device='cuda:1')[0m
[1] [91m [ moment_compute_loss ] Observed mask: tensor([[0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0]], device='cuda:1')[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0013318418059498072
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([5, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([5, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([5, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([5, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([5, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([5, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [91m [ fine_tune_moment_single_ ] Eval results: {'mse': 0.01186051271610452, 'rmse': nan, 'mae': 0.05162953799733749, 'smape': 0.4751140557348262, 'loss': 0.011515824140847794}.[0m
[1] [fine_tune_moment_single_ --> ]
[1]  [ fine_tune_moment_single_ ] fine_tune_moment_single_ | Evaluation summary
[1]  [ fine_tune_moment_single_ ] Eval pre: 
2025-01-30 16:21:03.440 | mse: 0.0018097824296424805
2025-01-30 16:21:03.441 | rmse: nan
2025-01-30 16:21:03.441 | mae: 0.022393247394177775
2025-01-30 16:21:03.441 | smape: 0.20917028325201625
2025-01-30 16:21:03.441 | loss: 0.001758708940629038
[1]  [ fine_tune_moment_single_ ] Eval post: 
2025-01-30 16:21:03.442 | mse: 0.01186051271610452
2025-01-30 16:21:03.442 | rmse: nan
2025-01-30 16:21:03.443 | mae: 0.05162953799733749
2025-01-30 16:21:03.443 | smape: 0.4751140557348262
2025-01-30 16:21:03.443 | loss: 0.011515824140847794
[1] [fine_tune_moment_single_ --> ]
[1] [set_fine_tune_ --> ]
[1] [set_fine_tune_ --> ]
