[1] [ --> _set_encoder ]
[1]  [ _set_encoder ] About to exec _set_enc_input
[1]  [ _set_encoder ] enc_input~(429, 1, 12)
[1]  [ _set_encoder ] About to exec _set_optimizer
[1] [ --> _set_optimizer ]
[1] [_set_encoder --> ]
[1] [ --> set_fine_tune_ ]
[1]  [ set_fine_tune_ ] Model class: momentfm.models.moment.MOMENTPipeline
[1]  [ set_fine_tune_ ] Moment
[1] [set_fine_tune_ --> ]
[1] [_set_encoder --> ]
[1] [ --> fine_tune ]
[1]  [ fine_tune ] Original enc_learn MOMENTPipeline(
  (normalizer): RevIN()
  (tokenizer): Patching()
  (patch_embedding): PatchEmbedding(
    (value_embedding): Linear(in_features=8, out_features=512, bias=False)
    (position_embedding): PositionalEmbedding()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (encoder): T5Stack(
    (embed_tokens): Embedding(32128, 512)
    (block): ModuleList(
      (0): T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
              (relative_attention_bias): Embedding(32, 6)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (1-7): 7 x T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (final_layer_norm): T5LayerNorm()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (head): PretrainHead(
    (dropout): Dropout(p=0.1, inplace=False)
    (linear): Linear(in_features=512, out_features=8, bias=True)
  )
)  | Final model MOMENTPipeline(
  (normalizer): RevIN()
  (tokenizer): Patching()
  (patch_embedding): PatchEmbedding(
    (value_embedding): Linear(in_features=8, out_features=512, bias=False)
    (position_embedding): PositionalEmbedding()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (encoder): T5Stack(
    (embed_tokens): Embedding(32128, 512)
    (block): ModuleList(
      (0): T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
              (relative_attention_bias): Embedding(32, 6)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (1-7): 7 x T5Block(
        (layer): ModuleList(
          (0): T5LayerSelfAttention(
            (SelfAttention): T5Attention(
              (q): Linear(in_features=512, out_features=384, bias=False)
              (k): Linear(in_features=512, out_features=384, bias=False)
              (v): Linear(in_features=512, out_features=384, bias=False)
              (o): Linear(in_features=384, out_features=512, bias=False)
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (1): T5LayerFF(
            (DenseReluDense): T5DenseGatedActDense(
              (wi_0): Linear(in_features=512, out_features=1024, bias=False)
              (wi_1): Linear(in_features=512, out_features=1024, bias=False)
              (wo): Linear(in_features=1024, out_features=512, bias=False)
              (dropout): Dropout(p=0.1, inplace=False)
              (act): NewGELUActivation()
            )
            (layer_norm): T5LayerNorm()
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (final_layer_norm): T5LayerNorm()
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (head): PretrainHead(
    (dropout): Dropout(p=0.1, inplace=False)
    (linear): Linear(in_features=512, out_features=8, bias=True)
  )
)
[1] [ --> set_fine_tune_ ]
[1]  [ set_fine_tune_ ] Model class: momentfm.models.moment.MOMENTPipeline
[1]  [ set_fine_tune_ ] Moment
[1] [set_fine_tune_ --> ]
[1]  [ set_fine_tune_ ] Use fine_tune_moment parameters
[1] [91m [ set_fine_tune_ ] Processing wlen 12 | wlens [] | i 1/1[0m
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 6.105723878135905e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 4.467555845621973e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.001108204131014645
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0004912617732770741
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 9.189054981106892e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0013838164741173387
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0017997088143602014
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 8.055486250668764e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.001313334214501083
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.003689601318910718
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00011887337313964963
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0003206148976460099
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.008776078000664711
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00016665195289533585
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0003166233072988689
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.011881844140589237
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.004459853284060955
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0002603599859867245
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006710071116685867
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0073821060359478
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([2, 1, 12]) | batch_masks~torch.Size([2, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([2, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([2, 12])
[1]  [ moment_set_masks ] mask~torch.Size([2, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([2, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([2, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([2, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([2, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([2, 1, 12]) | o~torch.Size([2, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([2, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([2, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([2, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00028466153889894485
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([2, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([2, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([2, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([2, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([2, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([2, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [91m [ fine_tune_moment_single_ ] Eval results: {'mse': 0.21221099460062284, 'rmse': 0.06261189140802231, 'mae': 0.10795903062464951, 'smape': 0.5754837913490757, 'loss': 0.002416278217597643}.[0m
[1] [fine_tune_moment_single_ --> ]
[1]  [ fine_tune_moment_single_ ] Train | wlen 12
[1] [ --> fine_tune_moment_train_ ]
[1]  [ fine_tune_moment_train_ ] Training loop
[1]  [ fine_tune_moment_train_ ] Fine tune loop | batch_masks~torch.Size([16, 12])
[1]  [ fine_tune_moment_train_ ] num_epochs 5 | n_batches 7
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 12]) | epoch 0 | train 0 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0007207050803117454
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 12]) | epoch 0 | train 0 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 12]) | epoch 0 | train 1 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.2664828896522522
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 12]) | epoch 0 | train 1 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 12]) | epoch 0 | train 2 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.013250594027340412
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 12]) | epoch 0 | train 2 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 12]) | epoch 0 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.07798507809638977
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 12]) | epoch 0 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 12]) | epoch 0 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.04413389042019844
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 12]) | epoch 0 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 12]) | epoch 0 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.05096231773495674
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 12]) | epoch 0 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([12, 1, 12]) | epoch 0 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([12, 1, 12]) | batch_masks~torch.Size([12, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([12, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([12, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([12, 1, 12]) | batch_masks ~ torch.Size([12, 12]) | mask ~ torch.Size([12, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([12, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([12, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([12, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([12, 1, 12]) | o~torch.Size([12, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([12, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([12, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([12, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.03612735494971275
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([12, 1, 12]) | epoch 0 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 12]) | epoch 1 | train 1 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.03637860715389252
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 12]) | epoch 1 | train 1 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 12]) | epoch 1 | train 2 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.02022705227136612
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 12]) | epoch 1 | train 2 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 12]) | epoch 1 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.02456343173980713
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 12]) | epoch 1 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 12]) | epoch 1 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0349382720887661
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 12]) | epoch 1 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 12]) | epoch 1 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.03906894475221634
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 12]) | epoch 1 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 12]) | epoch 1 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.036238256841897964
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 12]) | epoch 1 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([12, 1, 12]) | epoch 1 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([12, 1, 12]) | batch_masks~torch.Size([12, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([12, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([12, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([12, 1, 12]) | batch_masks ~ torch.Size([12, 12]) | mask ~ torch.Size([12, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([12, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([12, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([12, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([12, 1, 12]) | o~torch.Size([12, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([12, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([12, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([12, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.008725196123123169
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([12, 1, 12]) | epoch 1 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 12]) | epoch 2 | train 2 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.02235717885196209
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 12]) | epoch 2 | train 2 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 12]) | epoch 2 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.023622142150998116
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 12]) | epoch 2 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 12]) | epoch 2 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.01863693818449974
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 12]) | epoch 2 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 12]) | epoch 2 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0076127019710838795
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 12]) | epoch 2 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 12]) | epoch 2 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.006151152774691582
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 12]) | epoch 2 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 12]) | epoch 2 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.008278447203338146
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 12]) | epoch 2 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([12, 1, 12]) | epoch 2 | train 8 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([12, 1, 12]) | batch_masks~torch.Size([12, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([12, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([12, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([12, 1, 12]) | batch_masks ~ torch.Size([12, 12]) | mask ~ torch.Size([12, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([12, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([12, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([12, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([12, 1, 12]) | o~torch.Size([12, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([12, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([12, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([12, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.01076737605035305
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([12, 1, 12]) | epoch 2 | train 8 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 12]) | epoch 3 | train 3 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.016074564307928085
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 12]) | epoch 3 | train 3 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 12]) | epoch 3 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.010408120229840279
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 12]) | epoch 3 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 12]) | epoch 3 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00281495857052505
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 12]) | epoch 3 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 12]) | epoch 3 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.007083068136125803
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 12]) | epoch 3 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 12]) | epoch 3 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.005197761580348015
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 12]) | epoch 3 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 12]) | epoch 3 | train 8 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0072867716662585735
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 12]) | epoch 3 | train 8 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([12, 1, 12]) | epoch 3 | train 9 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([12, 1, 12]) | batch_masks~torch.Size([12, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([12, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([12, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([12, 1, 12]) | batch_masks ~ torch.Size([12, 12]) | mask ~ torch.Size([12, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([12, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([12, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([12, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([12, 1, 12]) | o~torch.Size([12, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([12, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([12, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([12, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00464858952909708
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([12, 1, 12]) | epoch 3 | train 9 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 0 ~ torch.Size([16, 1, 12]) | epoch 4 | train 4 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00465824780985713
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 0 ~ torch.Size([16, 1, 12]) | epoch 4 | train 4 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 1 ~ torch.Size([16, 1, 12]) | epoch 4 | train 5 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.012290269136428833
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 1 ~ torch.Size([16, 1, 12]) | epoch 4 | train 5 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 2 ~ torch.Size([16, 1, 12]) | epoch 4 | train 6 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.008423598483204842
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 2 ~ torch.Size([16, 1, 12]) | epoch 4 | train 6 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 3 ~ torch.Size([16, 1, 12]) | epoch 4 | train 7 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.020630422979593277
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 3 ~ torch.Size([16, 1, 12]) | epoch 4 | train 7 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 4 ~ torch.Size([16, 1, 12]) | epoch 4 | train 8 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0024583193007856607
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 4 ~ torch.Size([16, 1, 12]) | epoch 4 | train 8 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 5 ~ torch.Size([16, 1, 12]) | epoch 4 | train 9 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([16, 1, 12]) | batch_masks ~ torch.Size([16, 12]) | mask ~ torch.Size([16, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.007363288197666407
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 5 ~ torch.Size([16, 1, 12]) | epoch 4 | train 9 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] batch 6 ~ torch.Size([12, 1, 12]) | epoch 4 | train 10 of 35 | Before loop step
[1] [ --> fine_tune_moment_train_loop_step_ ]
[1]  [ fine_tune_moment_train_loop_step_ ] Get the masks
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([12, 1, 12]) | batch_masks~torch.Size([12, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([12, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] mask~torch.Size([12, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([12, 12])
[1] [moment_set_masks --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] batch ~ torch.Size([12, 1, 12]) | batch_masks ~ torch.Size([12, 12]) | mask ~ torch.Size([12, 12])
[1]  [ fine_tune_moment_train_loop_step_ ] Batch device: cuda:1 | mask device: cuda:1 | batch_masks device: cuda:1
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([12, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([12, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([12, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_train_loop_step_ ] Output correctly obtained, compute loss
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([12, 1, 12]) | o~torch.Size([12, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([12, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([12, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([12, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.021934542804956436
[1] [moment_compute_loss --> ]
[1] [fine_tune_moment_train_loop_step_ --> ]
[1]  [ fine_tune_moment_train_ ] fine_tune_moment_train | batch 6 ~ torch.Size([12, 1, 12]) | epoch 4 | train 10 of 35 | Loss backward | After loop step 
[1]  [ fine_tune_moment_train_ ] Best epoch: 3
[1] [fine_tune_moment_train_ --> ]
[1]  [ fine_tune_moment_single_ ] fine_tune_moment_single | Eval Post | wlen 12
[1] [ --> fine_tune_moment_single_ ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0001906340039568022
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 6.633850716752931e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0019719183910638094
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0009592254646122456
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0008667699876241386
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0009061754099093378
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.004525310825556517
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 7.788655784679577e-05
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0008779794443398714
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00839319173246622
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0013206079602241516
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0006766075384803116
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.016007089987397194
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00019716851238626987
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0006095626158639789
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.015337477438151836
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.010183442384004593
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.0003172332071699202
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.004577299579977989
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([16, 1, 12]) | batch_masks~torch.Size([16, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([16, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] mask~torch.Size([16, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([16, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([16, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([16, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([16, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([16, 1, 12]) | o~torch.Size([16, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([16, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([16, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([16, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.020499125123023987
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([16, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([16, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([16, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([16, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [ --> fine_tune_moment_eval_step_ ]
[1] [ --> moment_set_masks ]
[1]  [ moment_set_masks ] batch~torch.Size([2, 1, 12]) | batch_masks~torch.Size([2, 12]).
[1]  [ moment_set_masks ] window_mask_percent 0.25 | batch ~ torch.Size([2, 1, 12])
[1]  [ moment_set_masks ] Using mask generator with mask ratio 0.25
[1]  [ moment_set_masks ] Mask~torch.Size([2, 12])
[1]  [ moment_set_masks ] mask~torch.Size([2, 12])
[1]  [ moment_set_masks ] batch_masks~torch.Size([2, 12])
[1] [moment_set_masks --> ]
[1] [ --> moment_safe_forward_pass ]
[1]  [ moment_safe_forward_pass ] cpu | False | device | 1
[1]  [ moment_safe_forward_pass ] Device 1 | input_mask~torch.Size([2, 12]) device: cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | mask device~torch.Size([2, 12]): cuda:1
[1]  [ moment_safe_forward_pass ] Device 1 | batch~torch.Size([2, 1, 12]) device: cuda:1
[1] [91m [ moment_safe_forward_pass ] Using device: 1[0m
[1] [91m [ moment_safe_forward_pass ] CUDA is available: True[0m
[1] [91m [ moment_safe_forward_pass ] Model device: cuda:1[0m
[1] [91m [ moment_safe_forward_pass ] Devices: batch - cuda:1 | input_mask - cuda:1 | mask - cuda:1.[0m
[1]  [ moment_safe_forward_pass ] Computation done | output is None? False
[1] [moment_safe_forward_pass --> ]
[1]  [ fine_tune_moment_single_ ] Output is not None
[1] [ --> moment_compute_loss ]
[1]  [ moment_compute_loss ] b~torch.Size([2, 1, 12]) | o~torch.Size([2, 1, 8])
[1]  [ moment_compute_loss ] batch ~ torch.Size([2, 1, 12]) | cuda:1
[1]  [ moment_compute_loss ] batch_masks ~ torch.Size([2, 12]) | cuda:1
[1]  [ moment_compute_loss ] mask ~ torch.Size([2, 12]) | cuda:1
[1] [91m [ moment_compute_loss ] Criterion: MSELoss()[0m
[1]  [ moment_compute_loss ] Loss type: <class 'torch.Tensor'>
[1]  [ moment_compute_loss ] loss: 0.00030408293241634965
[1] [moment_compute_loss --> ]
[1] [ --> fine_tune_moment_eval_preprocess ]
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | preds~torch.Size([2, 1, 8])
[1]  [ fine_tune_moment_eval_preprocess ] Before reshape | refs~torch.Size([2, 1, 12])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | preds~torch.Size([2, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After reshape | refs~torch.Size([2, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | preds~torch.Size([2, 8])
[1]  [ fine_tune_moment_eval_preprocess ] After NaN | refs~torch.Size([2, 8])
[1] [fine_tune_moment_eval_preprocess --> ]
[1] [fine_tune_moment_single_ --> ]
[1] [91m [ fine_tune_moment_single_ ] Eval results: {'mse': 0.06401244115026496, 'rmse': 0.004402437600306676, 'mae': 0.03475445105227127, 'smape': 0.35293762837882403, 'loss': 0.004231672743030469}.[0m
[1] [fine_tune_moment_single_ --> ]
[1]  [ fine_tune_moment_single_ ] fine_tune_moment_single_ | Evaluation summary
[1]  [ fine_tune_moment_single_ ] Eval pre: 
2025-01-31 15:48:43.759 | mse: 0.21221099460062284
2025-01-31 15:48:43.759 | rmse: 0.06261189140802231
2025-01-31 15:48:43.760 | mae: 0.10795903062464951
2025-01-31 15:48:43.760 | smape: 0.5754837913490757
2025-01-31 15:48:43.760 | loss: 0.002416278217597643
[1]  [ fine_tune_moment_single_ ] Eval post: 
2025-01-31 15:48:43.761 | mse: 0.06401244115026496
2025-01-31 15:48:43.761 | rmse: 0.004402437600306676
2025-01-31 15:48:43.761 | mae: 0.03475445105227127
2025-01-31 15:48:43.761 | smape: 0.35293762837882403
2025-01-31 15:48:43.762 | loss: 0.004231672743030469
[1] [fine_tune_moment_single_ --> ]
[1] [91m [ set_fine_tune_ ] best_epoch: [0m
[1] [set_fine_tune_ --> ]
[1] [set_fine_tune_ --> ]
